<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PayPal JS SDK Standard Integration - Checkout</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      .navbar {
        background-color: #333;
        overflow: hidden;
        padding: 40px 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .navbar h1 {
        color: white;
        margin: 0;
        font-size: 24px;
        font-weight: normal;
      }

      .navbar a {
        color: white;
        text-align: center;
        padding: 14px 16px;
        text-decoration: none;
        font-size: 17px;
        transition: background-color 0.3s, color 0.3s;
      }

      .navbar a:hover {
        background-color: #ddd;
        color: black;
        border-radius: 5px;
      }

      .navbar a:not(:last-child) {
        margin-right: 10px;
      }
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f9f9f9;
      }
      .container {
        max-width: 900px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      h1,
      h2 {
        text-align: center;
        color: #333;
      }
      pre {
        background-color: #f4f4f4;
        padding: 15px;
        border-radius: 5px;
        overflow-x: auto;
      }
      code {
        font-family: "Courier New", Courier, monospace;
        color: #c7254e;
        background-color: #f9f2f4;
      }
      .code-section {
        margin-bottom: 40px;
      }
      .button-container {
        text-align: center;
        margin-top: 20px;
      }
      .button-container button {
        margin: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
      }
      #paypal-button-container {
        text-align: center;
        margin-top: 20px;
      }
      #result-message {
        text-align: center;
        margin-top: 20px;
        font-size: 16px;
        color: #333;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/default.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <script>
      hljs.highlightAll();
    </script>
  </head>
  <body>
    <div class="navbar">
      <h1>
        <a href="/">Code Example Website</a>
      </h1>
      <div>
        <a href="/standardview">Standard</a>
        <a href="/advancedview">Advanced</a>

        <a href="/cards">Cards</a>
      </div>
    </div>
    <div class="container">
      <div class="button-container">
        <button onclick="showCode('server')">server.js</button>
        <button onclick="showCode('app')">app.js</button>
        <button onclick="showCode('html')">checkout.html</button>
        <!-- <button onclick="showCode('html')">Show HTML</button> -->
      </div>

      <div id="code-display" class="code-section">
        <!-- Code will be displayed here -->
      </div>
    </div>

    <script>
      const codeSamples = {
        server: `// server.js
import express from "express";
import fetch from "node-fetch";
import "dotenv/config";
import path from "path";
import { fileURLToPath } from "url";

// Convert file URL to file path
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, PORT = 8888 } = process.env;
const base = "https://api-m.sandbox.paypal.com";
const app = express();

// host static files
const clientPath = path.join(__dirname, "../client");
app.use(express.static(clientPath));

// parse post params sent in body in json format
app.use(express.json());

/**
 * Generate an OAuth 2.0 access token for authenticating with PayPal REST APIs.
 * @see https://developer.paypal.com/api/rest/authentication/
 */
const generateAccessToken = async () => {
  try {
    if (!PAYPAL_CLIENT_ID || !PAYPAL_CLIENT_SECRET) {
      throw new Error("MISSING_API_CREDENTIALS");
    }
    const auth = Buffer.from(
      PAYPAL_CLIENT_ID + ":" + PAYPAL_CLIENT_SECRET
    ).toString("base64");
    const response = await fetch(\`\${base}/v1/oauth2/token\`, {
      method: "POST",
      body: "grant_type=client_credentials",
      headers: {
        Authorization: \`Basic \${auth}\`,
      },
    });

    const data = await response.json();
    return data.access_token;
  } catch (error) {
    console.error("Failed to generate Access Token:", error);
  }
};

/**
 * Create an order to start the transaction.
 * @see https://developer.paypal.com/docs/api/orders/v2/#orders_create
 */
const createOrder = async (cart) => {
  // use the cart information passed from the front-end to calculate the purchase unit details
  console.log(
    "shopping cart information passed from the frontend createOrder() callback:",
    cart
  );

  const accessToken = await generateAccessToken();
  const url = \`\${base}/v2/checkout/orders\`;
  const payload = {
    intent: "CAPTURE",
    purchase_units: [
      {
        amount: {
          currency_code: "GBP",
          value: "10.00",
        },
      },
    ],
  };

  const response = await fetch(url, {
    headers: {
      "Content-Type": "application/json",
      Authorization: \`Bearer \${accessToken}\`,
      // Uncomment one of these to force an error for negative testing (in sandbox mode only). Documentation:
      // https://developer.paypal.com/tools/sandbox/negative-testing/request-headers/
      // "PayPal-Mock-Response": '{"mock_application_codes": "MISSING_REQUIRED_PARAMETER"}'
      // "PayPal-Mock-Response": '{"mock_application_codes": "PERMISSION_DENIED"}'
      // "PayPal-Mock-Response": '{"mock_application_codes": "INTERNAL_SERVER_ERROR"}'
    },
    method: "POST",
    body: JSON.stringify(payload),
  });

  return handleResponse(response);
};

/**
 * Capture payment for the created order to complete the transaction.
 * @see https://developer.paypal.com/docs/api/orders/v2/#orders_capture
 */
const captureOrder = async (orderID) => {
  const accessToken = await generateAccessToken();
  const url = \`\${base}/v2/checkout/orders/\${orderID}/capture\`;

  const response = await fetch(url, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: \`Bearer \${accessToken}\`,
      // Uncomment one of these to force an error for negative testing (in sandbox mode only). Documentation:
      // https://developer.paypal.com/tools/sandbox/negative-testing/request-headers/
      // "PayPal-Mock-Response": '{"mock_application_codes": "INSTRUMENT_DECLINED"}'
      // "PayPal-Mock-Response": '{"mock_application_codes": "TRANSACTION_REFUSED"}'
      // "PayPal-Mock-Response": '{"mock_application_codes": "INTERNAL_SERVER_ERROR"}'
    },
  });

  return handleResponse(response);
};

async function handleResponse(response) {
  try {
    const jsonResponse = await response.json();
    return {
      jsonResponse,
      httpStatusCode: response.status,
    };
  } catch (err) {
    const errorMessage = await response.text();
    throw new Error(errorMessage);
  }
}

app.post("/api/orders", async (req, res) => {
  try {
    // use the cart information passed from the front-end to calculate the order amount detals
    const { cart } = req.body;
    const { jsonResponse, httpStatusCode } = await createOrder(cart);
    res.status(httpStatusCode).json(jsonResponse);
  } catch (error) {
    console.error("Failed to create order:", error);
    res.status(500).json({ error: "Failed to create order." });
  }
});

app.post("/api/orders/:orderID/capture", async (req, res) => {
  try {
    const { orderID } = req.params;
    const { jsonResponse, httpStatusCode } = await captureOrder(orderID);
    res.status(httpStatusCode).json(jsonResponse);
  } catch (error) {
    console.error("Failed to create order:", error);
    res.status(500).json({ error: "Failed to capture order." });
  }
});

// serve index.html
app.get("/", (req, res) => {
  res.sendFile(path.resolve("../client/checkout.html"));
});

app.listen(PORT, () => {
  console.log(\`\Node server listening at http://localhost:\${PORT}/\`\);
});
`,
        app: `// app.js
window.paypal
  .Buttons({
    style: {
      shape: "pill",
      layout: "vertical",
      color: "black",
      label: "pay",
    },
    message: {
      amount: 100,
    },
    async createOrder() {
      try {
        const response = await fetch("/api/orders", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          // use the "body" param to optionally pass additional order information
          // like product ids and quantities
          body: JSON.stringify({
            cart: [
              {
                id: "1",
                quantity: "1",
              },
            ],
          }),
        });

        const orderData = await response.json();

        if (orderData.id) {
          return orderData.id;
        }
        const errorDetail = orderData?.details?.[0];
        const errorMessage = errorDetail
          ? \`\${errorDetail.issue} \${errorDetail.description} (\${orderData.debug_id})\`
          : JSON.stringify(orderData);

        throw new Error(errorMessage);
      } catch (error) {
        console.error(error);
        // resultMessage(\`\Could not initiate PayPal Checkout...<br><br>\${error}\`\);
      }
    },
    async onApprove(data, actions) {
      try {
        const response = await fetch(\`/api/orders/\${data.orderID}/capture\`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        const orderData = await response.json();
        // Three cases to handle:
        //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
        //   (2) Other non-recoverable errors -> Show a failure message
        //   (3) Successful transaction -> Show confirmation or thank you message

        const errorDetail = orderData?.details?.[0];

        if (errorDetail?.issue === "INSTRUMENT_DECLINED") {
          // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
          // recoverable state, per
          // https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/
          return actions.restart();
        } else if (errorDetail) {
          // (2) Other non-recoverable errors -> Show a failure message
          throw new Error(\`\${errorDetail.description} (\${orderData.debug_id})\`);
        } else if (!orderData.purchase_units) {
          throw new Error(JSON.stringify(orderData));
        } else {
          // (3) Successful transaction -> Show confirmation or thank you message
          // Or go to another URL:  actions.redirect('thank_you.html');
          const transaction =
            orderData?.purchase_units?.[0]?.payments?.captures?.[0] ||
            orderData?.purchase_units?.[0]?.payments?.authorizations?.[0];
          resultMessage(
            \`Transaction \${transaction.status}: \${transaction.id}<br>
          <br>See console for all available details\`
          );
          console.log(
            "Capture result",
            orderData,
            JSON.stringify(orderData, null, 2)
          );
        }
      } catch (error) {
        console.error(error);
        resultMessage(
          \`Sorry, your transaction could not be processed...<br><br>\${error}\`
        );
      }
    },
    onShippingOptionsChange: (data, actions) => {

    onError: (err) => {
      // redirect to your specific error page
      window.location.assign("/");
    },
    onCancel: (data) => {
      // Show a cancel page or return to cart
      window.location.assign("/");
    },
  })
  .render("#paypal-button-container");
`,
        html: `// html
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
    &lt;title&gt;PayPal JS SDK Standard Integration - Checkout&lt;/title&gt;
    &lt;style&gt;
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #d8c2c2;
      }

      .container {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      h1 {
        text-align: center;
        color: #333;
      }

      .product {
        display: flex;
        align-items: center;
        border-bottom: 1px solid #ccc;
        padding: 10px 0;
        margin-bottom: 10px;
      }

      .product img {
        width: 80px;
        height: 80px;
        margin-right: 20px;
      }

      .product-info {
        flex-grow: 1;
      }

      .product-title {
        font-weight: bold;
      }

      .product-price {
        color: #666;
      }

      #paypal-button-container {
        text-align: center;
        margin-top: 20px;
      }

      #result-message {
        text-align: center;
        margin-top: 20px;
        font-size: 16px;
        color: #333;
      }
    &lt;/style&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;h1&gt;PayPal JS SDK Standard Integration - Checkout&lt;/h1&gt;
    &lt;div class="container"&gt;
      &lt;h1&gt;Checkout&lt;/h1&gt;

      &lt;div class="product"&gt;
        &lt;img src="https://picsum.photos/200" alt="Product Image" /&gt;
        &lt;div class="product-info"&gt;
          &lt;div class="product-title"&gt;Sample Product&lt;/div&gt;
          &lt;div class="product-price"&gt;£10.00&lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div id="paypal-button-container"&gt;&lt;/div&gt;
      &lt;p id="result-message"&gt;&lt;/p&gt;
    &lt;/div&gt;

    &lt;script src="https://www.paypal.com/sdk/js?client-id=CLIENT_ID&amp;currency=GBP"&gt;&lt;/script&gt;
    &lt;script src="app.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
`,
      };

      function showCode(section) {
        const codeDisplay = document.getElementById("code-display");
        codeDisplay.innerHTML = `<pre><code>${codeSamples[section]}</code></pre>`;
        hljs.highlightAll();
      }
    </script>
  </body>
</html>
