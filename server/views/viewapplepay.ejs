<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PayPal JS SDK Standard Integration - Checkout</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      .navbar {
        background-color: #333;
        overflow: hidden;
        padding: 40px 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .navbar h1 {
        color: white;
        margin: 0;
        font-size: 24px;
        font-weight: normal;
      }

      .navbar a {
        color: white;
        text-align: center;
        padding: 14px 16px;
        text-decoration: none;
        font-size: 17px;
        transition: background-color 0.3s, color 0.3s;
      }

      .navbar a:hover {
        background-color: #ddd;
        color: black;
        border-radius: 5px;
      }

      .navbar a:not(:last-child) {
        margin-right: 10px;
      }
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f9f9f9;
      }
      .container {
        max-width: 900px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }
      h1,
      h2 {
        text-align: center;
        color: #333;
      }
      pre {
        background-color: #f4f4f4;
        padding: 15px;
        border-radius: 5px;
        overflow-x: auto;
      }
      code {
        font-family: "Courier New", Courier, monospace;
        color: #c7254e;
        background-color: #f9f2f4;
      }
      .code-section {
        margin-bottom: 40px;
      }
      .button-container {
        text-align: center;
        margin-top: 20px;
      }
      .button-container button {
        margin: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
      }
      #paypal-button-container {
        text-align: center;
        margin-top: 20px;
      }
      #result-message {
        text-align: center;
        margin-top: 20px;
        font-size: 16px;
        color: #333;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/default.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js"></script>
    <script>
      hljs.highlightAll();
    </script>
  </head>
  <body>
    <div class="navbar">
      <h1>
        <a href="/">Code Example Website</a>
      </h1>
      <div>
        <a href="/standardview">Standard</a>
        <a href="/advancedview">Advanced</a>
        <a href="https://fastlane-sand.vercel.app/" target="_blank">Fastlane</a>
        <a href="/hostedfields">Braintree Hosted Fields</a>
        <a href="/cards">Cards</a>
      </div>
    </div>
    <div class="container">
      <div class="button-container">
        <button onclick="showCode('server')">server.js</button>
        <button onclick="showCode('client')">app.js</button>
        <button onclick="showCode('paypalApi')">paypal-api.js</button>
        <button onclick="showCode('html')">checkout.html</button>
        <!-- <button onclick="showCode('html')">Show HTML</button> -->
      </div>

      <div id="code-display" class="code-section">
        <!-- Code will be displayed here -->
      </div>
    </div>

    <script>
      const codeSamples = {
        server: `// server.js
        import * as applepay from "./paypal-api.js";
import "dotenv/config";
import express from "express";
import { fileURLToPath } from "url";
import path from "path";
        const base = "https://api-m.sandbox.paypal.com";
// Convert file URL to file path
const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.set("view engine", "ejs");
app.set("views", "./views");

// Host static files
const clientPath = path.join(__dirname, "../client");
app.use(express.static(clientPath));
app.set("view engine", "ejs");
app.set("views", "./views");

// Middleware to parse JSON requests
app.use(express.json());
        app.get("/applepay", async (req, res) => {
  const clientId = PAYPAL_CLIENT_ID,
    merchantId = PAYPAL_MERCHANT_ID;
  try {
    const clientToken = await applepay.generateClientToken();
    res.render("applepay", { clientId, clientToken, merchantId });
  } catch (err) {
    res.status(500).send(err.message);
  }
});

// create order
app.post("/applepay/api/orders", async (req, res) => {
  try {
    const order = await applepay.createOrder();
    console.log("order", order);
    res.json(order);
  } catch (err) {
    res.status(500).send(err.message);
  }
});

// capture payment
app.post("/applepay/api/orders/:orderID/capture", async (req, res) => {
  const { orderID } = req.params;
  try {
    const captureData = await applepay.capturePayment(orderID);
    res.json(captureData);
  } catch (err) {
    res.status(500).send(err.message);
  }
});
app.listen(8888, () => {
  console.log("Listening on http://localhost:8888/");
});
`,
        paypalApi: `// paypal-api.js
import fetch from "node-fetch";

// set some important variables
const { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, PAYPAL_MERCHANT_ID } =
  process.env;
const base = "https://api-m.sandbox.paypal.com";

// call the create order method
export async function createOrder() {
  const purchaseAmount = "10.00"; // TODO: pull prices from a database
  const accessToken = await generateAccessToken();
  const url = \`\${base}/v2/checkout/orders\`;
  const response = await fetch(url, {
    method: "post",
    headers: {
      "Content-Type": "application/json",
      Authorization: \`Bearer \${accessToken}\`,
    },
    body: JSON.stringify({
      intent: "CAPTURE",
      purchase_units: [
        {
          amount: {
            currency_code: "GBP",
            value: purchaseAmount,
          },
          payee: {
            merchant_id: PAYPAL_MERCHANT_ID,
          },
        },
      ],
    }),
  });

  return handleResponse(response);
}

// capture payment for an order
export async function capturePayment(orderId) {
  const accessToken = await generateAccessToken();
  const url = \`\${base}/v2/checkout/orders/\${orderId}/capture\`;
  const response = await fetch(url, {
    method: "post",
    headers: {
      "Content-Type": "application/json",
      Authorization: \`Bearer \${accessToken}\`,
    },
  });

  return handleResponse(response);
}

// generate access token
export async function generateAccessToken() {
  const auth = Buffer.from(
    PAYPAL_CLIENT_ID + ":" + PAYPAL_CLIENT_SECRET
  ).toString("base64");
  const response = await fetch(\`\${base}/v1/oauth2/token\`, {
    method: "post",
    body: "grant_type=client_credentials",
    headers: {
      Authorization: \`Basic \${auth}\`,
    },
  });
  const jsonData = await handleResponse(response);
  return jsonData.access_token;
}

// generate client token
export async function generateClientToken() {
  const accessToken = await generateAccessToken();
  const response = await fetch(\`\${base}/v1/identity/generate-token\`, {
    method: "post",
    headers: {
      Authorization: \`Bearer \${accessToken}\`,
      "Accept-Language": "en_US",
      "Content-Type": "application/json",
    },
  });
  console.log("response", response.status);
  const jsonData = await handleResponse(response);
  return jsonData.client_token;
}

async function handleResponse(response) {
  if (response.status === 200 || response.status === 201) {
    return response.json();
  }

  const errorMessage = await response.text();
  throw new Error(errorMessage);
}
`,
        client: `// client.js
async function setupApplepay() {
  const applepay = paypal.Applepay();
  const {
    isEligible,
    countryCode,
    currencyCode,
    merchantCapabilities,
    supportedNetworks,
  } = await applepay.config();

  if (!isEligible) {
    throw new Error(&quot;applepay is not eligible&quot;);
  }

  document.getElementById(&quot;applepay-container&quot;).innerHTML =
    '&lt;apple-pay-button id=&quot;btn-appl&quot; buttonstyle=&quot;black&quot; type=&quot;buy&quot; locale=&quot;en&quot;&gt;';

  document.getElementById(&quot;btn-appl&quot;).addEventListener(&quot;click&quot;, onClick);

  async function onClick() {
    console.log({ merchantCapabilities, currencyCode, supportedNetworks });

    const paymentRequest = {
      countryCode,
      currencyCode: &quot;GBP&quot;,
      merchantCapabilities,
      supportedNetworks,
      requiredBillingContactFields: [&quot;name&quot;, &quot;phone&quot;, &quot;email&quot;, &quot;postalAddress&quot;],
      requiredShippingContactFields: [],
      total: {
        label: &quot;Demo (Card is not charged)&quot;,
        amount: &quot;10.00&quot;,
        type: &quot;final&quot;,
      },
    };

    // eslint-disable-next-line no-undef
    let session = new ApplePaySession(4, paymentRequest);

    session.onvalidatemerchant = (event) => {
      applepay
        .validateMerchant({
          validationUrl: event.validationURL,
        })
        .then((payload) => {
          session.completeMerchantValidation(payload.merchantSession);
        })
        .catch((err) => {
          console.error(err);
          session.abort();
        });
    };

    session.onpaymentmethodselected = () => {
      session.completePaymentMethodSelection({
        newTotal: paymentRequest.total,
      });
    };

    session.onpaymentauthorized = async (event) => {
      try {
        /* Create Order on the Server Side */
        const orderResponse = await fetch(&quot;/applepay/api/orders&quot;, {
          method: &quot;POST&quot;,
          headers: {
            &quot;Content-Type&quot;: &quot;application/json&quot;,
          },
        });
        if (!orderResponse.ok) {
          throw new Error(&quot;error creating order&quot;);
        }

        const { id } = await orderResponse.json();
        console.log({ id });
        /**
         * Confirm Payment
         */
        await applepay.confirmOrder({
          orderId: id,
          token: event.payment.token,
          billingContact: event.payment.billingContact,
          shippingContact: event.payment.shippingContact,
        });

        /*
         * Capture order (must currently be made on server)
         */
        await fetch(\`/applepay/api/orders/\${id}/capture\`, {
          method: &quot;POST&quot;,
        });

        session.completePayment({
          status: window.ApplePaySession.STATUS_SUCCESS,
        });
      } catch (err) {
        console.error(err);
        session.completePayment({
          status: window.ApplePaySession.STATUS_FAILURE,
        });
      }
    };

    session.oncancel = () => {
      console.log(&quot;Apple Pay Cancelled !!&quot;);
    };

    session.begin();
  }
}

document.addEventListener(&quot;DOMContentLoaded&quot;, () => {
  // eslint-disable-next-line no-undef
  if (
    ApplePaySession?.supportsVersion(4) &&
    ApplePaySession?.canMakePayments()
  ) {
    setupApplepay().catch(console.error);
  }
});
`,
        html: `
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt;
    &lt;style&gt;
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      main {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }

      .container {
        display: flex;
        flex-direction: column;
        text-align: center;
        background-color: lightgray;
        max-width: 500px;
        min-height: 15em;
        padding: 20px;
      }

      #applepay-container {
        flex-grow: 1;
      }
    &lt;/style&gt;

    &lt;!-- Include Apple SDK Script --&gt;
    &lt;script src=&quot;https://applepay.cdn-apple.com/jsapi/v1/apple-pay-sdk.js&quot;&gt;&lt;/script&gt;
    &lt;!-- Include PayPal SDK Script with components=applepay for Custom Applepay Component--&gt;
    &lt;script
      src=&quot;https://www.paypal.com/sdk/js?components=applepay&amp;buyer-country=GB&amp;currency=GBP&amp;client-id=&lt;%= clientId %&gt;&amp;merchant-id=&lt;%= merchantId %&gt;&quot;
      data-client-token=&quot;&lt;%= clientToken %&gt;&quot;
      data-partner-attribution-id=&quot;APPLEPAY&quot;&gt;&lt;/script&gt;
    &lt;!-- 
    &lt;link
      href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css&quot;
      rel=&quot;stylesheet&quot;
      integrity=&quot;sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3&quot;
      crossorigin=&quot;anonymous&quot; /&gt; --&gt;
  &lt;/head&gt;
  &lt;body&gt;
    
    &lt;main&gt;
      &lt;div class=&quot;container&quot;&gt;
        &lt;h3&gt;Sample Applepay Integration&lt;/h3&gt;
        &lt;h6&gt;Basic Integration (no amount breakdown / no shipping)&lt;/h6&gt;
        &lt;div id=&quot;applepay-container&quot;&gt;&lt;/div&gt;

        &lt;div&gt;
          &lt;i&gt;
            You wont be charged any money. Try with Apple Pay Test Cards on
            Sandbox. You can find them
            &lt;a
              target=&quot;_blank&quot;
              href=&quot;https://developer.apple.com/apple-pay/sandbox-testing/&quot;
              &gt;here&lt;/a&gt;
          &lt;/i&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/main&gt;
    &lt;script src=&quot;applepay.js&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;`,
      };

      function showCode(section) {
        const codeDisplay = document.getElementById("code-display");
        codeDisplay.innerHTML = `<pre><code>${codeSamples[section]}</code></pre>`;
        hljs.highlightAll();
      }
    </script>
  </body>
</html>
